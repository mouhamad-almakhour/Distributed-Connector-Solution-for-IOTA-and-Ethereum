// SPDX-License-Identifier: MIT
pragma solidity *0.8.0;

contract EventExample {

            struct device {
                    string id;
                    string value;
                    
                    }
    
    constructor()  {
        add_device("1","10");
        add_device("2","24");

    }

   event DataStored(string id, uint256 timestamp, string status);
   event login(string id, uint256 timestamp, string status);
   event addDevice(string id, uint256 timestamp, string status);
    
   mapping (uint => device)  public DEVICES; 
   uint256  public device_counter=0;

  

    function add_device(string memory id, string memory val) public {
        
            DEVICES[device_counter]= device(id,val);
            emit addDevice(id, block.timestamp," a device is added  ");
            device_counter ++;
        }

   function storeData(string memory _val, string memory _id) external {
    for(uint i=0;i< device_counter;i++){
       if(keccak256(abi.encodePacked((DEVICES[i].id))) == keccak256(abi.encodePacked((_id)))){
        DEVICES[i].id=_val;
        emit DataStored(_id, block.timestamp," the device stored data"  );
                    }
            }
    }

    function getData(string memory _id) external {
    for(uint i=0;i< device_counter;i++){
    if(keccak256(abi.encodePacked((DEVICES[i].id))) == keccak256(abi.encodePacked((_id)))){
         emit DataStored(DEVICES[i].id, block.timestamp," someone request some data");
                    }
            }
    }

    function login_Device(string memory _id ) external{
    for(uint i=0;i< device_counter;i++){
     if(keccak256(abi.encodePacked((DEVICES[i].id))) == keccak256(abi.encodePacked((_id)))){
            emit login(_id, block.timestamp,"device login");
             }
         }
    }

}